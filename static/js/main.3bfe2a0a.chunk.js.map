{"version":3,"sources":["components/TryAgain/TryAgain.jsx","components/ChallengeDetailsCard/ChallengeDetailsCard.jsx","components/TestLetter/TestLetter.jsx","components/TypingChallenge/TypingChallenge.jsx","components/TypingChallengeContainer/TypingChallengeContainer.jsx","components/TestContainer/TestContainer.jsx","components/ChallengeSection/ChallengeSection.jsx","components/Footer/Footer.jsx","assets/flash.png","components/Landing/Landing.jsx","assets/logo.png","components/Nav/Nav.jsx","components/App/App.jsx","index.js"],"names":["TryAgain","words","characters","wpm","startAgain","url","data-aos","className","onClick","window","open","ChallengeDetailsCard","cardName","cardValue","TestLetter","individualLetterInfo","statusClassName","correct","incorrect","notAttempted","status","testLetter","TypingChallenge","testInfo","onInputChange","timeRemaining","timerStarted","map","index","onChange","e","target","value","placeholder","TypingChallengeContainer","selectedParagraph","TestContainer","ChallengeSection","Footer","href","rel","Landing","options","strings","autoStart","loop","src","flash","alt","Nav","logo","DefaultState","App","state","fetchNewParagraph","fetch","then","response","text","data","split","selectedLetter","setState","startTimer","timer","setInterval","timeSpent","parseInt","clearInterval","handleUserInput","inputValue","length","slice","isMistake","this","React","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.3bfe2a0a.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./TryAgain.css\";\r\n\r\nconst TryAgain = ({ words, characters, wpm, startAgain }) => {\r\n    const url = \"theleanprogrammer.com\";\r\n    return (\r\n        <div data-aos=\"fade-up\" className=\"try-again-container\">\r\n            <h1>Test Results</h1>\r\n\r\n            <div className=\"result-container\">\r\n                <p>\r\n                    <b>Characters:</b> {characters}\r\n                </p>\r\n                <p>\r\n                    <b>Words:</b> {words}\r\n                </p>\r\n                <p>\r\n                    <b>Speed</b> {wpm} wpm\r\n                </p>\r\n            </div>\r\n\r\n            <div>\r\n                <button\r\n                    onClick={() => startAgain()}\r\n                    className=\"end-buttons start-again-btn\"\r\n                >\r\n                    Re-try\r\n                </button>\r\n                <button\r\n                    onClick={() =>\r\n                        window.open(\r\n                            \"https://www.facebook.com/sharer/sharer.php?u=\" +\r\n                                url,\r\n                            \"facebook-share-dialog\",\r\n                            \"width=800,height=600\"\r\n                        )\r\n                    }\r\n                    className=\"end-buttons share-btn\"\r\n                >\r\n                    Share\r\n                </button>\r\n                <button\r\n                    onClick={() =>\r\n                        window.open(\r\n                            \"https://twitter.com/intent/tweet?text=Check%20this%20out%20\" +\r\n                                url,\r\n                            \"Twitter\",\r\n                            \"width=800,height=600\"\r\n                        )\r\n                    }\r\n                    className=\"end-buttons tweet-btn\"\r\n                >\r\n                    Tweet\r\n                </button>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default TryAgain;\r\n","import React from \"react\";\r\nimport \"./ChallengeDetailsCard.css\";\r\n\r\nconst ChallengeDetailsCard = ({ cardName, cardValue }) => {\r\n    return (\r\n        <div className=\"details-card-container\">\r\n            <div className=\"card-name\">{cardName}</div>\r\n            <div className=\"card-value\">{cardValue}</div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ChallengeDetailsCard;\r\n","import React from \"react\";\r\nimport \"./TestLetter.css\";\r\n\r\nconst TestLetter = ({ individualLetterInfo }) => {\r\n    const statusClassName = {\r\n        correct: \"test-letter-correct\",\r\n        incorrect: \"test-letter-incorrect\",\r\n        notAttempted: \"test-letter-not-attempted\",\r\n    }[individualLetterInfo.status];\r\n\r\n    return (\r\n        <span className={`test-letter ${statusClassName}`}>\r\n            {individualLetterInfo.testLetter}\r\n        </span>\r\n    );\r\n};\r\n\r\nexport default TestLetter;\r\n","import React from \"react\";\r\nimport TestLetter from \"../TestLetter/TestLetter\";\r\nimport \"./TypingChallenge.css\";\r\n\r\nconst TypingChallenge = ({\r\n    testInfo,\r\n    onInputChange,\r\n    timeRemaining,\r\n    timerStarted,\r\n}) => {\r\n    return (\r\n        <div className=\"typing-challenge\">\r\n            <div className=\"timer-container\">\r\n                <p className=\"timer\">\r\n                    00:\r\n                    {timeRemaining >= 10 ? timeRemaining : `0${timeRemaining}`}\r\n                </p>\r\n                <p className=\"timer-info\">\r\n                    {!timerStarted && \"Start typing to start the test\"}\r\n                </p>\r\n            </div>\r\n\r\n            <div className=\"textarea-container\">\r\n                <div className=\"textarea-left \">\r\n                    <div className=\"textarea test-paragraph\">\r\n                        {/* {selectedParagraph} */}\r\n                        {testInfo.map((individualLetterInfo, index) => (\r\n                            <TestLetter\r\n                                key={index}\r\n                                individualLetterInfo={individualLetterInfo}\r\n                            />\r\n                        ))}\r\n                    </div>\r\n                </div>\r\n                <div className=\"textarea-right\">\r\n                    <textarea\r\n                        onChange={(e) => onInputChange(e.target.value)}\r\n                        className=\"textarea\"\r\n                        placeholder=\"Start typing here\"\r\n                    ></textarea>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default TypingChallenge;\r\n","import React from \"react\";\r\nimport ChallengeDetailsCard from \"../ChallengeDetailsCard/ChallengeDetailsCard\";\r\nimport TypingChallenge from \"../TypingChallenge/TypingChallenge\";\r\nimport \"./TypingChallengeContainer.css\";\r\n\r\nconst TypingChallengeContainer = ({\r\n    selectedParagraph,\r\n    testInfo,\r\n    onInputChange,\r\n    words,\r\n    characters,\r\n    wpm,\r\n    timeRemaining,\r\n    timerStarted,\r\n}) => {\r\n    return (\r\n        <div className=\"typing-challenge-container\">\r\n            <div className=\"details-container\">\r\n                {/* Words Typed */}\r\n                <ChallengeDetailsCard cardName=\"Words\" cardValue={words} />\r\n\r\n                {/* Characters Typed */}\r\n                <ChallengeDetailsCard\r\n                    cardName=\"Characters\"\r\n                    cardValue={characters}\r\n                />\r\n\r\n                {/* Mistakes */}\r\n                <ChallengeDetailsCard cardName=\"WPM\" cardValue={wpm} />\r\n            </div>\r\n\r\n            <div className=\"typewriter-container\">\r\n                <TypingChallenge\r\n                    testInfo={testInfo}\r\n                    selectedParagraph={selectedParagraph}\r\n                    onInputChange={onInputChange}\r\n                    timeRemaining={timeRemaining}\r\n                    timerStarted={timerStarted}\r\n                />\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default TypingChallengeContainer;\r\n","import React from \"react\";\r\nimport TryAgain from \"../TryAgain/TryAgain\";\r\nimport TypingChallengeContainer from \"../TypingChallengeContainer/TypingChallengeContainer\";\r\nimport \"./TestContainer.css\";\r\n\r\nconst TestContainer = ({\r\n    selectedParagraph,\r\n    testInfo,\r\n    onInputChange,\r\n    words,\r\n    characters,\r\n    wpm,\r\n    timeRemaining,\r\n    timerStarted,\r\n    startAgain,\r\n}) => {\r\n    return (\r\n        <div className=\"test-container\">\r\n            {/* Show the try again or start screen */}\r\n            {timeRemaining > 0 ? (\r\n                <div data-aos=\"fade-up\" className=\"typing-challenge-cont\">\r\n                    <TypingChallengeContainer\r\n                        selectedParagraph={selectedParagraph}\r\n                        testInfo={testInfo}\r\n                        onInputChange={onInputChange}\r\n                        words={words}\r\n                        characters={characters}\r\n                        wpm={wpm}\r\n                        timeRemaining={timeRemaining}\r\n                        timerStarted={timerStarted}\r\n                    />\r\n                </div>\r\n            ) : (\r\n                <div className=\"try-again-cont\">\r\n                    <TryAgain\r\n                        words={words}\r\n                        characters={characters}\r\n                        wpm={wpm}\r\n                        startAgain={startAgain}\r\n                    />\r\n                </div>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default TestContainer;\r\n","import React from \"react\";\r\nimport TestContainer from \"../TestContainer/TestContainer\";\r\nimport \"./ChallengeSection.css\";\r\n\r\nconst ChallengeSection = ({\r\n    selectedParagraph,\r\n    testInfo,\r\n    onInputChange,\r\n    words,\r\n    characters,\r\n    wpm,\r\n    timeRemaining,\r\n    timerStarted,\r\n    startAgain,\r\n}) => {\r\n    return (\r\n        <div className=\"challenge-section-container\">\r\n            <h1 data-aos=\"fade-down\" className=\"challenge-section-header\">\r\n                Take a Speed Test Now!\r\n            </h1>\r\n            <TestContainer\r\n                testInfo={testInfo}\r\n                selectedParagraph={selectedParagraph}\r\n                onInputChange={onInputChange}\r\n                words={words}\r\n                characters={characters}\r\n                wpm={wpm}\r\n                timeRemaining={timeRemaining}\r\n                timerStarted={timerStarted}\r\n                startAgain={startAgain}\r\n            />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ChallengeSection;\r\n","import React from \"react\";\r\nimport \"./Footer.css\";\r\n\r\nconst Footer = () => {\r\n    return (\r\n        <div className=\"footer-container\">\r\n            <a\r\n                target=\"_blank\"\r\n                className=\"footer-link\"\r\n                href=\"https://theleanprogrammer.com/aam\"\r\n                rel=\"noreferrer\"\r\n            >\r\n                Watch the full react course now!\r\n            </a>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Footer;\r\n","export default __webpack_public_path__ + \"static/media/flash.96e141d3.png\";","import React from \"react\";\r\nimport Typewriter from \"typewriter-effect\";\r\n\r\nimport \"./Landing.css\";\r\nimport flash from \"./../../assets/flash.png\";\r\n\r\nconst Landing = () => {\r\n    return (\r\n        <div className=\"landing-container\">\r\n            <div data-aos=\"fade-right\" className=\"landing-left\">\r\n                <h1 className=\"landing-header\">Can you type</h1>\r\n                <div className=\"typewriter-container\">\r\n                    <Typewriter\r\n                        options={{\r\n                            strings: [\"Fast?\", \"Correct?\", \"Quick?\"],\r\n                            autoStart: true,\r\n                            loop: true,\r\n                        }}\r\n                    />\r\n                </div>\r\n            </div>\r\n            <div className=\"landing-right\">\r\n                <img\r\n                    data-aos=\"fade-left\"\r\n                    className=\"flash-image\"\r\n                    src={flash}\r\n                    alt=\"flash\"\r\n                />\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Landing;\r\n","export default __webpack_public_path__ + \"static/media/logo.904ac8fd.png\";","import React from \"react\";\r\nimport \"./Nav.css\";\r\nimport logo from \"./../../assets/logo.png\";\r\n\r\nconst Nav = () => {\r\n    return (\r\n        <div className=\"nav-container\">\r\n            <div className=\"nav-left\">\r\n                <img className=\"flash-logo\" src={logo} alt=\"logo\" />\r\n                <p className=\"flash-logo-text\">FlashType</p>\r\n            </div>\r\n            <div className=\"nav-right\">\r\n                <a\r\n                    target=\"_blank\"\r\n                    className=\"nav-aam-link\"\r\n                    href=\"https://theleanprogrammer.com/aam\"\r\n                    rel=\"noreferrer\"\r\n                >\r\n                    AAM\r\n                </a>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Nav;\r\n","import React from \"react\";\r\nimport ChallengeSection from \"../ChallengeSection/ChallengeSection\";\r\nimport Footer from \"../Footer/Footer\";\r\nimport Landing from \"../Landing/Landing\";\r\nimport Nav from \"../Nav/Nav\";\r\nimport \"./App.css\";\r\n\r\n/**\r\n * Schema of Test Info:\r\n * [\r\n *    {\r\n *      testLetter: 'H',\r\n *      status: correct/incorrect/notAttempted\r\n *    }, {\r\n *      testLetter: 'e',\r\n *      status: correct/incorrect/notAttempted\r\n *    }\r\n * ]\r\n */\r\n\r\nconst TotalTime = 60;\r\nconst DefaultState = {\r\n    selectedParagraph: \"Hello World!\",\r\n    testInfo: [],\r\n    timerStarted: false,\r\n    timeRemaining: TotalTime,\r\n    words: 0,\r\n    characters: 0,\r\n    wpm: 0,\r\n};\r\n\r\nclass App extends React.Component {\r\n    // state = {\r\n    //     selectedParagraph: \"Hello World!\",\r\n    //     testInfo: [],\r\n    //     timerStarted: false,\r\n    //     timeRemaining: TotalTime,\r\n    //     words: 0,\r\n    //     characters: 0,\r\n    //     wpm: 0,\r\n    // };\r\n    state = DefaultState;\r\n\r\n    fetchNewParagraph = () => {\r\n        fetch(\"http://metaphorpsum.com/paragraphs/1/8\")\r\n            .then((response) => response.text())\r\n            .then((data) => {\r\n                // Once the api results are here, break the selectedParagraph into test info\r\n                const selectedParagraphArray = data.split(\"\");\r\n                const testInfo = selectedParagraphArray.map(\r\n                    (selectedLetter) => {\r\n                        return {\r\n                            testLetter: selectedLetter,\r\n                            status: \"notAttempted\",\r\n                        };\r\n                    }\r\n                );\r\n\r\n                // Update the testInfo in state\r\n                this.setState({\r\n                    ...DefaultState,\r\n                    selectedParagraph: data,\r\n                    testInfo,\r\n                });\r\n            });\r\n    };\r\n\r\n    componentDidMount() {\r\n        // As soon as the component mounts, load the selected paragraph from the API\r\n        this.fetchNewParagraph();\r\n    }\r\n\r\n    startAgain = () => this.fetchNewParagraph();\r\n\r\n    startTimer = () => {\r\n        this.setState({ timerStarted: true });\r\n        const timer = setInterval(() => {\r\n            if (this.state.timeRemaining > 0) {\r\n                // Change the WPM and Time Remaining\r\n                const timeSpent = TotalTime - this.state.timeRemaining;\r\n                const wpm =\r\n                    timeSpent > 0\r\n                        ? (this.state.words / timeSpent) * TotalTime\r\n                        : 0;\r\n                this.setState({\r\n                    timeRemaining: this.state.timeRemaining - 1,\r\n                    wpm: parseInt(wpm),\r\n                });\r\n            } else {\r\n                clearInterval(timer);\r\n            }\r\n        }, 1000);\r\n    };\r\n\r\n    handleUserInput = (inputValue) => {\r\n        if (!this.state.timerStarted) this.startTimer();\r\n\r\n        /**\r\n         * 1. Handle the underflow case - all characters should be shown as not-attempted\r\n         * 2. Handle the overflow case - early exit\r\n         * 3. Handle the backspace case\r\n         *      - Mark the [index+1] element as notAttempted\r\n         *        (irrespective of whether the index is less than zero)\r\n         *      - But, don't forget to check for the overflow here\r\n         *        (index + 1 -> out of bound, when index === length-1)\r\n         * 4. Update the status in test info\r\n         *      1. Find out the last character in the inputValue and it's index\r\n         *      2. Check if the character at same index in testInfo (state) matches\r\n         *      3. Yes -> Correct\r\n         *         No  -> Incorrect (Mistake++)\r\n         * 5. Irrespective of the case, characters, words and wpm can be updated\r\n         */\r\n\r\n        const characters = inputValue.length;\r\n        const words = inputValue.split(\" \").length;\r\n        const index = characters - 1;\r\n\r\n        if (index < 0) {\r\n            this.setState({\r\n                testInfo: [\r\n                    {\r\n                        testLetter: this.state.testInfo[0].testLetter,\r\n                        status: \"notAttempted\",\r\n                    },\r\n                    ...this.state.testInfo.slice(1),\r\n                ],\r\n                characters,\r\n                words,\r\n            });\r\n\r\n            return;\r\n        }\r\n\r\n        if (index >= this.state.selectedParagraph.length) {\r\n            this.setState({\r\n                characters,\r\n                words,\r\n            });\r\n            return;\r\n        }\r\n\r\n        // Make a copy\r\n        const testInfo = this.state.testInfo;\r\n        if (!(index === this.state.selectedParagraph.length - 1))\r\n            testInfo[index + 1].status = \"notAttempted\";\r\n\r\n        // Check for mistake\r\n        const isMistake = inputValue[index] === testInfo[index].testLetter;\r\n\r\n        // Update the testInfo\r\n        testInfo[index].status = isMistake ? \"correct\" : \"incorrect\";\r\n\r\n        // Update the state\r\n        this.setState({\r\n            testInfo,\r\n            words,\r\n            characters,\r\n        });\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"app\">\r\n                <Nav />\r\n                <Landing />\r\n                <ChallengeSection\r\n                    selectedParagraph={this.state.selectedParagraph}\r\n                    testInfo={this.state.testInfo}\r\n                    onInputChange={this.handleUserInput}\r\n                    words={this.state.words}\r\n                    characters={this.state.characters}\r\n                    wpm={this.state.wpm}\r\n                    timeRemaining={this.state.timeRemaining}\r\n                    timerStarted={this.state.timerStarted}\r\n                    startAgain={this.startAgain}\r\n                />\r\n                <Footer />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./components/App/App\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n"],"sourceRoot":""}